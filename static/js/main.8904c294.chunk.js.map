{"version":3,"sources":["Session.js","Break.js","App.js","reportWebVitals.js","index.js"],"names":["Session","props","id","className","onClick","setSession","session","Break","setBreak","break","App","React","useState","breakLength","setBreakLength","sessionLength","setSessionLength","sessionIsShown","setSessionIsShown","isRunning","setIsRunning","totalTimeLeft","setTotalTimeLeft","sessionCounter","timeDisplay","totalTimeLeftBreak","setTotalTimeLeftBreak","breakCounter","alarm","document","getElementById","min","minutes","Math","floor","seconds","ceil","useEffect","countdown","setTimeout","prevTotalTimeLeft","clearTimeout","currentTime","play","countdown2","prevTotalTimeLeftInSecondsBreak","type","prevBreakLength","prevSessionLength","prevIsRunning","pause","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8904c294.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Session(props) {\r\n  return (\r\n    <div >\r\n      <h4 id=\"session-label\">Session Length</h4>\r\n      <div className=\"Session\">\r\n        <button className=\"rounded\"\r\n          onClick={() => props.setSession(\"increment\")}\r\n          id=\"session-increment\"\r\n        >\r\n          <span className=\"iconify\" data-icon=\"akar-icons:arrow-up-thick\"></span>\r\n        </button>\r\n        <h5 id=\"session-length\">{props.session}</h5>\r\n        <button className=\"rounded\"\r\n          onClick={() => props.setSession(\"decrement\")}\r\n          id=\"session-decrement\"\r\n        >\r\n          <span className=\"iconify\" data-icon=\"akar-icons:arrow-down-thick\"></span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Session;\r\n","import React from \"react\";\r\n\r\nfunction Break(props) {\r\n  return (\r\n    <div>\r\n      <h4 id=\"break-label\">Break Length</h4>\r\n      <div className=\"Break\">\r\n        <button className=\"rounded\"\r\n          onClick={() => props.setBreak(\"increment\")}\r\n          id=\"break-increment\"\r\n        >\r\n          <span className=\"iconify\" data-icon=\"akar-icons:arrow-up-thick\"></span>\r\n        </button>\r\n        <h5 id=\"break-length\">{props.break}</h5>\r\n        <button className=\"rounded\"\r\n          onClick={() => props.setBreak(\"decrement\")}\r\n          id=\"break-decrement\"\r\n        >\r\n          <span className=\"iconify\" data-icon=\"akar-icons:arrow-down-thick\"></span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Break;\r\n","import React, { useEffect } from \"react\";\nimport Session from \"./Session\";\nimport Break from \"./Break\";\n\nimport \"./App.css\";\n\n//change to 500ms tests still pass!!!-- drift seems to be a serious pb\n//put newDate so doesn't lag behind\n\n//simulate several sessions in a row, use as timer -\n\n//see remove useEffect/refactor- remove totaltimeleft break and have use effect for both cases?\n// see handling breaks refactor too.\n\n\nfunction App(props) {\n  //useState defs for break and session lengths\n  //retrieved from Break and Session components\n  const [breakLength, setBreakLength] = React.useState(5);\n  const [sessionLength, setSessionLength] = React.useState(25);\n  // initially in Clock component\n  const [sessionIsShown, setSessionIsShown] = React.useState(true); //conditional rendering\n  const [isRunning, setIsRunning] = React.useState(false); //button logic\n  //This only decrement seconds and then calculate with timeDisplay function,\n  //then reinject values in sessioncounter \n  const [totalTimeLeft, setTotalTimeLeft] = React.useState(sessionLength);\n  let sessionCounter = timeDisplay(totalTimeLeft);\n  //same logic than directly above but for breaks.\n  const [totalTimeLeftBreak, setTotalTimeLeftBreak] =\n    React.useState(breakLength);\n  let breakCounter = timeDisplay(totalTimeLeftBreak);\n\n  const alarm = document.getElementById(\"beep\");\n\n  function timeDisplay(min) {\n    let minutes = Math.floor(min / 60);\n    let seconds = Math.ceil(min % 60);\n\n    let arr = [\n      minutes < 10 ? \"0\" + minutes : minutes,\n      seconds < 10 ? \"0\" + seconds : seconds,\n    ];\n\n    return arr;\n  }\n\n  //handling sessions and breaks\n  const handleBreaks = (type) => {\n    if (isRunning) {\n      return;\n    } else if (type === \"decrement\") {\n      if (breakLength === 1) {\n        return;\n      } else {\n        setBreakLength((prevBreakLength) => prevBreakLength - 1);\n      }\n    } else {\n      if (breakLength === 60) {\n        return;\n      } else {\n        setBreakLength((prevBreakLength) => prevBreakLength + 1);\n      }\n    }\n  };\n\n  const handleSession = (type) => {\n    if (isRunning) {\n      return;\n    } else if (type === \"decrement\") {\n      if (sessionLength === 1) {\n        return;\n      } else {\n        setSessionLength((prevSessionLength) => prevSessionLength - 1);\n      }\n    } else {\n      if (sessionLength === 60) {\n        return;\n      } else {\n        setSessionLength((prevSessionLength) => prevSessionLength + 1);\n      }\n    }\n  };\n\n  //handling logic for sessions with useEffect\n\n  useEffect(() => {\n    setTotalTimeLeft(sessionLength * 60);\n  }, [sessionLength]);\n\n  useEffect(() => {\n    if (!isRunning || !sessionIsShown) {\n      return;\n    } else if (totalTimeLeft === 0) {\n      alarm.currentTime = 0;\n      alarm.play();\n      setSessionIsShown(false);\n      setTimeout(() => {\n        setTotalTimeLeft(sessionLength * 60);\n      }, 1000); //needed so it doesn't flicker after 1 session and 1 break play\n    } else {\n      const countdown = setTimeout(() => {\n        setTotalTimeLeft((prevTotalTimeLeft) => prevTotalTimeLeft - 1);\n      }, 1000);\n      return () => clearTimeout(countdown);\n    }\n  }, [totalTimeLeft, isRunning, sessionIsShown, sessionLength, alarm]);\n\n  //using same handling logic than above with useEffect but for breaks\n\n  useEffect(() => {\n    setTotalTimeLeftBreak(breakLength * 60);\n  }, [breakLength]);\n\n  useEffect(() => {\n    if (!isRunning || sessionIsShown) {\n      return;\n    } else if (totalTimeLeftBreak === 0) {\n      alarm.currentTime = 0;\n      alarm.play();\n      setSessionIsShown(true);\n    } else {\n      const countdown2 = setTimeout(() => {\n        setTotalTimeLeftBreak(\n          (prevTotalTimeLeftInSecondsBreak) =>\n            prevTotalTimeLeftInSecondsBreak - 1\n        );\n      }, 1000);\n      return () => clearTimeout(countdown2);\n    }\n  }, [totalTimeLeftBreak, isRunning, sessionIsShown, alarm]);\n\n  const startStopCountdown = () => {\n    setIsRunning((prevIsRunning) => !prevIsRunning);\n  };\n\n  const resetCountdown = () => {\n    setIsRunning(false);\n    alarm.pause();\n    alarm.currentTime = 0;\n    setSessionLength(25);\n    setBreakLength(5);\n    setSessionIsShown(true);\n  };\n\n  return (\n    <div>\n      <div className=\"App\">\n        <div className=\"Pomodoro containre-fluid\">\n          <h2>Pomodoro Clock</h2>\n\n          <div className=\"my-container\">\n            <Break setBreak={handleBreaks} break={breakLength} />\n            <Session setSession={handleSession} session={sessionLength} />\n          </div>\n\n          <div className=\"Clock\">\n            <h3 id=\"timer-label\">{sessionIsShown ? \"Session\" : \"Break\"}</h3>\n            <h1 id=\"time-left\">\n              {sessionIsShown\n                ? `${sessionCounter[0]}:${sessionCounter[1]}`\n                : `${breakCounter[0]}:${breakCounter[1]}`}\n            </h1>\n\n            <button\n              id=\"start_stop\"\n              onClick={startStopCountdown}\n              className=\"rounded-pill\"\n            >\n              <span\n                className=\"iconify\"\n                data-icon=\"emojione-monotone:play-or-pause-button\"\n              ></span>\n            </button>\n            <button\n              id=\"reset\"\n              onClick={resetCountdown}\n              className=\"rounded-pill\"\n            >\n              <span className=\"iconify\" data-icon=\"ri:restart-fill\"></span>\n            </button>\n            <audio type=\"audio\" id=\"beep\" src=\"/Alarm.wav\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}